name: GitHub Terraform AKS
on: 
    workflow_run: 
      workflows: ["GitHub Create State"]
      types:
        - completed
    workflow_dispatch: 
env:
    ARM_CLIENT_ID: "${{secrets.AZURE_CLIENT_ID}}"
    ARM_SUBSCRIPTION_ID: "${{secrets.AZURE_SUBSCRIPTION_ID}}"
    ARM_TENANT_ID: "${{secrets.AZURE_TENANT_ID}}"
    ARM_SECRET_CLIENT: "${{secrets.AZURE_SECRET_CLIENT}}"
    WORKING_DIR: ./tfaks
jobs:
    terraform-plan:
        name: "Terraform Deploy AKS"
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                cli_config_credentials_token: ${{secrets.TF_API_TOKEN}}
            - name: Azure Login
              uses: azure/login@v2
              with:
                creds: ${{secrets.AZURE_CREDENTIALS}}
            - name: Get Access Key
              id: get-access-key
              run: |
                PRIMARY_ACCESS_KEY=$(az storage account keys list --resource-group my-terraform-state-rg --account-name mytfstatesahca --query "[0].value" --output tsv)
                echo "primary_access_key=$PRIMARY_ACCESS_KEY" >> $GITHUB_OUTPUT          
            - name: Terraform Init
              run: terraform init -reconfigure -input=false -backend-config="storage_account_name=mytfstatesahca" -backend-config="container_name=tfstate" -backend-config="access_key=${{steps.get-access-key.outputs.primary_access_key}}" -backend-config="key=dev/terraform.tfstate"
              working-directory: ${{env.WORKING_DIR}}
            - id: plan
              name: Terraform Plan
              run: terraform plan -no-color -var appId=$ARM_CLIENT_ID -var password=$ARM_SECRET_CLIENT
              working-directory: ${{env.WORKING_DIR}}
            - id: apply
              name: Terraform Apply
              run: terraform apply -auto-approve -var appId=$ARM_CLIENT_ID -var password=$ARM_SECRET_CLIENT
              working-directory: ${{env.WORKING_DIR}}
            - id: get-aks-credentials
              name: Get AKS Credentials
              run: |
                az aks get-credentials --resource-group $(terraform output -raw resource_group_name) --name $(terraform output -raw cluster_name) 
              working-directory: ${{env.WORKING_DIR}}
            - id: get-public-ip
              name: Get public ip of load balancer
              working-directory: ${{env.WORKING_DIR}}
              run: |                
                echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT
            - id: helm-nginx
              name: Actualizando el ingress nginx
              run: |
               helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
               helm repo update
            - name: Create values.yaml
              run: |
                echo "controller:" > values.yaml
                echo "  service:" >> values.yaml
                echo "    loadBalancerIP: ${{ steps.get-public-ip.outputs.public_ip }}" >> values.yaml
                echo "    annotations:" >> values.yaml
                echo "      service.beta.kubernetes.io/azure-load-balancer-resource-group: $(terraform output -raw resource_group_name)" >> values.yaml
              working-directory: ${{env.WORKING_DIR}}
            - name: Install ingress controller with helm
              run: |
                helm install ingress-nginx ingress-nginx/ingress-nginx -f values.yaml --namespace ingress-nginx --create-namespace
              working-directory: ${{env.WORKING_DIR}}